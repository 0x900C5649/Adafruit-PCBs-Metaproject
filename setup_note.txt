import datetime
import time
import requests
import configparser
import re
import subprocess


reg = r'submodule "(?P<name>.+)"'

config = configparser.ConfigParser() 
config.read('.gitmodules')

currentrepos = []
for s in config.sections():
    m = re.match(reg, s)
    currentrepos.append(m.group('name'))

    
header = {'Accept': 'application/json'}
repos = [] 
para = {'q': 'pcb user:adafruit', 'page':1, 'per_page':100} 
baseurl = 'https://api.github.com/search/repositories' 
while(1): 
    r = requests.get(baseurl, params=para, headers=header) 
    if r.status_code != 200: 
        print("problem") 
        break 
    j = r.json() 
    for i in j['items']: 
        repos.append((i['name'], i['full_name'], i['clone_url'])) 
     
    if int(r.headers['X-Ratelimit-Remaining']) == 0: 
        waitfor = int((datetime.datetime.fromtimestamp(int(r.headers['X-Ratelimit-Reset'])) - datetime.datetime.now()).total_seconds()) + 1 
        if(waitfor > 0): 
            time.sleep(waitfor) 
 
    if len(repos) < j['total_count']: 
        para['page'] = para['page']+1 
    else:
        print(j['total_count'])
        break

gitbaseurl = '../../'
crepos = []
for (name,full_name,url) in repos:
    cname = name
    lookfor = ["Adafruit", "PCB", "PCBs"]
    connectors = ["_", "-"]
    manipulators = [(lambda x: x), str.lower]
    totest = [c(a)+b for a in lookfor for b in connectors for c in manipulators]
    totest += [b+c(a) for a in lookfor for b in connectors for c in manipulators]
    
    combine = [a(lookfor[0]) + b + c(lookfor[1]) + b for a in manipulators for b in connectors for c in manipulators]
    combine += [b + a(lookfor[0]) + b + c(lookfor[1])  for a in manipulators for b in connectors for c in manipulators]
    
    for test in combine + totest:
        if(cname.startswith(test)):
            cname = cname.replace(test, '', 1)
        cname = cname[::-1]
        if(cname.startswith(test[::-1])):
            cname = cname.replace(test[::-1], '', 1)
        cname = cname[::-1]

    moduleurl = gitbaseurl + full_name + '.git'
    if cname not in currentrepos:
        crepos.append((cname, moduleurl))


for (name,url) in crepos: 
    process = subprocess.Popen(['git', 'submodule', 'add', url, "src/"+name], stdout=subprocess.PIPE) 
    print(process.communicate()[0])
        
        
        
        
template = '''
[submodule "{n}"]
        path = {n}
        url = {u}
'''
gitmodulestr = ''
for (name, url) in crepos:
    gitmodulestr += template.format(n = name, u=url)

print(gitmodulestr)

newrepos = []
for (name, url) in crepos: 
    if name not in currentrepos: 
        newrepos.append((name, url))
        
